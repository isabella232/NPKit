Copyright (c) Microsoft Corporation.
Licensed under the MIT License.

diff --git a/src/transport/net.cc b/src/transport/net.cc
index be24232..c4972c8 100644
--- a/src/transport/net.cc
+++ b/src/transport/net.cc
@@ -12,6 +12,9 @@
 #include "collectives.h"
 #include <hsa/hsa_ext_amd.h>
 #include "gdrwrap.h"
+#if defined(ENABLE_NPKIT)
+#include "npkit/npkit.h"
+#endif
 
 struct netConnectInfo {
   ncclNetHandle_t netHandle;
@@ -362,6 +365,11 @@ ncclResult_t netSendProxy(struct ncclProxyArgs* args) {
         if (sizesFifo[buffSlot] != -1 && ((*recvTail > (sub->base+sub->transmitted)) || p == NCCL_PROTO_LL)) {
           // We have something to receive, let's check if it's completely ready.
           int size = sizesFifo[buffSlot];
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_NET_SEND_ENTRY) && defined(ENABLE_NPKIT_EVENT_NET_SEND_EXIT)
+          sub->npKitSizesFifo[buffSlot] = size;
+#endif
+
           char* buff = resources->shared ? (char*)resources->recvMem->ptrsFifo[buffSlot] : localBuff+buffSlot*stepSize;
           int ready = 1;
           if (p == NCCL_PROTO_LL128) {
@@ -405,6 +413,14 @@ ncclResult_t netSendProxy(struct ncclProxyArgs* args) {
               sub->channel->sizes += LOAD(sizesFifo+buffSlot);
               sub->channel->send_byte += LOAD(sizesFifo+buffSlot);
 #endif
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_NET_SEND_ENTRY) && defined(ENABLE_NPKIT_EVENT_NET_SEND_EXIT)
+          NpKit::GenerateAndCollectCpuEvent(
+              NPKIT_EVENT_NET_SEND_ENTRY, size, uint64_t(sub->requests+buffSlot)/sizeof(void*),
+              *(volatile uint64_t*)NpKit::GetCpuTimeStamp(),
+              &(sub->channel->npKitEvent), sub->channel->cpuNpKitEventCollectContext);
+#endif
+
               TRACE(NCCL_NET, "sendProxy [%ld/%d] Isend (LL) posted, req %p", sub->transmitted, buffSlot, sub->requests[buffSlot]);
               sizesFifo[buffSlot] = -1;
               // Make sure size is reset to zero before we update the head.
@@ -422,6 +438,14 @@ ncclResult_t netSendProxy(struct ncclProxyArgs* args) {
         int buffSlot = (sub->base+sub->done)%NCCL_STEPS;
         NCCLCHECK(ncclNetTest(sub->requests[buffSlot], &done, NULL));
         if (done) {
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_NET_SEND_ENTRY) && defined(ENABLE_NPKIT_EVENT_NET_SEND_EXIT)
+          NpKit::GenerateAndCollectCpuEvent(
+              NPKIT_EVENT_NET_SEND_EXIT, sub->npKitSizesFifo[buffSlot], uint64_t(sub->requests+buffSlot)/sizeof(void*),
+              *(volatile uint64_t*)NpKit::GetCpuTimeStamp(),
+              &(sub->channel->npKitEvent), sub->channel->cpuNpKitEventCollectContext);
+#endif
+
           TRACE(NCCL_NET, "sendProxy [%lu/%d] request %p done", sub->done, buffSlot, sub->requests[buffSlot]);
 #ifdef ENABLE_PROFILING
           if (args->protocol == NCCL_PROTO_SIMPLE) {
@@ -499,6 +523,14 @@ ncclResult_t netRecvProxy(struct ncclProxyArgs* args) {
         }
         NCCLCHECK(ncclNetIrecv(resources->netRecvComm, ptr, buffSize, mhandle, sub->requests+buffSlot));
         if (sub->requests[buffSlot] != NULL) {
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_NET_RECV_ENTRY) && defined(ENABLE_NPKIT_EVENT_NET_RECV_EXIT)
+          NpKit::GenerateAndCollectCpuEvent(
+              NPKIT_EVENT_NET_RECV_ENTRY, buffSize, uint64_t(sub->requests+buffSlot)/sizeof(void*),
+              *(volatile uint64_t*)NpKit::GetCpuTimeStamp(),
+              &(sub->channel->npKitEvent), sub->channel->cpuNpKitEventCollectContext);
+#endif
+
           TRACE(NCCL_NET, "recvProxy [%lu/%d] posted recv request %p", sub->posted, buffSlot, sub->requests[buffSlot]);
 #ifdef ENABLE_PROFILING
           if (args->protocol == NCCL_PROTO_SIMPLE) {
@@ -519,6 +551,14 @@ ncclResult_t netRecvProxy(struct ncclProxyArgs* args) {
         int done, size;
         NCCLCHECK(ncclNetTest(sub->requests[buffSlot], &done, &size));
         if (done) {
+
+#if defined(ENABLE_NPKIT) && defined(ENABLE_NPKIT_EVENT_NET_RECV_ENTRY) && defined(ENABLE_NPKIT_EVENT_NET_RECV_EXIT)
+          NpKit::GenerateAndCollectCpuEvent(
+              NPKIT_EVENT_NET_RECV_EXIT, size, uint64_t(sub->requests+buffSlot)/sizeof(void*),
+              *(volatile uint64_t*)NpKit::GetCpuTimeStamp(),
+              &(sub->channel->npKitEvent), sub->channel->cpuNpKitEventCollectContext);
+#endif
+
           sub->received += args->sliceSteps;
 #ifdef ENABLE_PROFILING
           if (args->protocol == NCCL_PROTO_SIMPLE) {
